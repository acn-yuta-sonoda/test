}
X <- rbind(X, x)
}
colnames(X) <- sprintf("V%d", seq(ncol(X)))
kd2 <- kde2d(X[,1], X[,2], c(bandwidth.nrd(X[,1]), bandwidth.nrd(X[,2])), n=1000)
cols <- jet.colors(iter)
plot(X, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Gibbs sampling", xlim=xl, ylim=yl)
#lines(x, col=cols)
for(i in 2:iter){
for(j in seq(ncol(X))){
y <- rbind(replace(X[i-1,], 0:(j-1), X[i, 0:(j-1)]), replace(X[i-1,], 1:j, X[i, 1:j]))
segments(y[1,1], y[1,2], y[2,1], y[2,2], col=cols[i])
}
}
points(X[1,1], X[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd2, add=TRUE, col=1)
X <- matrix(x0, nr=1)
for(j in 2:iter){
x <- X[j-1,]
for(i in seq(mu)){
s <- sig[-i, i] %*% solve(sig[-i, -i])   # Σ_ab Σ_bb ^ -1
# (PRML 2.81) μ_a|b = μ_a + Σ_ab Σ_bb ^ -1 (x_b - μ_b)
mu_a_b <- mu[i] + s %*% (x[-i] - mu[-i])
# (PRML 2.82) Σ_a|b = Σ_aa - Σ_ab Σ_bb ^ -1 Σ_ba
sig_a_b <- sig[i, i] - s %*% sig[i, -i]
# [Gibbs] x_a ～ p(x_a|x_{-a}) = N(μ_a|b, Σ_a|b)
x[i] <- rnorm(1, mu_a_b, sqrt(sig_a_b))
}
X <- rbind(X, x)
}
colnames(X) <- sprintf("V%d", seq(ncol(X)))
kd2 <- kde2d(X[,1], X[,2], c(bandwidth.nrd(X[,1]), bandwidth.nrd(X[,2])), n=1000)
cols <- jet.colors(iter)
plot(X, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Gibbs sampling")
#lines(x, col=cols)
for(i in 2:iter){
for(j in seq(ncol(X))){
y <- rbind(replace(X[i-1,], 0:(j-1), X[i, 0:(j-1)]), replace(X[i-1,], 1:j, X[i, 1:j]))
segments(y[1,1], y[1,2], y[2,1], y[2,2], col=cols[i])
}
}
points(X[1,1], X[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd2, add=TRUE, col=1)
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
cols <- jet.colors(iter)
plot(x, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Metropolis-Hastings sampling")
for(i in 2:iter){
segments(x[i-1,1], x[i-1,2], x[i,1], x[i,2], col=cols[i])
}
points(x[1,1], x[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd1, add=TRUE, col=1)
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
cols <- jet.colors(iter)
plot(x, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Metropolis-Hastings sampling")
for(i in 2:iter){
segments(x[i-1,1], x[i-1,2], x[i,1], x[i,2], col=cols[i])
}
points(x[1,1], x[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd1, add=TRUE, col=1)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
if(!require("mvtnorm")){
install.packages("mvtnorm")
}
if(!require("matlab")){
install.packages("matlab")
}
library(mvtnorm)
library(MASS)
library(matlab)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
#initialization
x0 <- c(-5,2)
iter <- 1500
x <- matrix(0, iter, 2)
dratio <- rep(0, iter)
out <- rep(0, iter)
x[1,] <- x0
# correlation of 2-dimentional Normal distribution
rho <- 0.7
sig <- matrix(c(1, rho, rho, 1), 2)
mu <- c(4, 5)
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
cols <- jet.colors(iter)
plot(x, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Metropolis-Hastings sampling")
for(i in 2:iter){
segments(x[i-1,1], x[i-1,2], x[i,1], x[i,2], col=cols[i])
}
points(x[1,1], x[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd1, add=TRUE, col=1)
# Metropolis-Hestings
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
if(!require("mvtnorm")){
install.packages("mvtnorm")
}
if(!require("matlab")){
install.packages("matlab")
}
library(mvtnorm)
library(MASS)
library(matlab)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
#initialization
x0 <- c(-5,2)
iter <- 1500
x <- matrix(0, iter, 2)
dratio <- rep(0, iter)
out <- rep(0, iter)
x[1,] <- x0
# correlation of 2-dimentional Normal distribution
rho <- 0.7
sig <- matrix(c(1, rho, rho, 1), 2)
mu <- c(4, 5)
# Metropolis-Hestings
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
cols <- jet.colors(iter)
plot(x, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Metropolis-Hastings sampling")
for(i in 2:iter){
segments(x[i-1,1], x[i-1,2], x[i,1], x[i,2], col=cols[i])
}
points(x[1,1], x[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd1, add=TRUE, col=1)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
if(!require("mvtnorm")){
install.packages("mvtnorm")
}
if(!require("matlab")){
install.packages("matlab")
}
library(mvtnorm)
library(MASS)
library(matlab)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
#initialization
x0 <- c(-5,2)
iter <- 1500
x <- matrix(0, iter, 2)
dratio <- rep(0, iter)
out <- rep(0, iter)
x[1,] <- x0
# correlation of 2-dimentional Normal distribution
rho <- 0.7
sig <- matrix(c(1, rho, rho, 1), 2)
mu <- c(4, 5)
# Metropolis-Hestings
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
x
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
if(!require("mvtnorm")){
install.packages("mvtnorm")
}
if(!require("matlab")){
install.packages("matlab")
}
library(mvtnorm)
library(MASS)
library(matlab)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
#initialization
x0 <- c(-5,2)
iter <- 1500
x <- matrix(0, iter, 2)
dratio <- rep(0, iter)
out <- rep(0, iter)
x[1,] <- x0
# correlation of 2-dimentional Normal distribution
rho <- 0.7
sig <- matrix(c(1, rho, rho, 1), 2)
mu <- c(4, 5)
# Metropolis-Hestings
for(i in 2:iter){
walk <- runif(2, -0.5, 0.5)
v <- x[i-1,] + walk
dratio[i-1] <- dmvnorm(v, mean=mu, sigma=sig)/dmvnorm(x[i-1,], mean=mu, sigma=sig)
out[i-1] <- rbinom(1,1,min(1,dratio[i-1]))
x[i,] <- x[i-1,] + out[i-1] * walk
}
x
kd1 <- kde2d(x[,1], x[,2], c(bandwidth.nrd(x[,1]), bandwidth.nrd(x[,2])), n=1000)
cols <- jet.colors(iter)
plot(x, type="p", pch=16, cex=0.6, col=2, xlab="x1", ylab="x2", main="Metropolis-Hastings sampling")
for(i in 2:iter){
segments(x[i-1,1], x[i-1,2], x[i,1], x[i,2], col=cols[i])
}
points(x[1,1], x[1,2], pch="★", col=6)
points(mu[1], mu[2], pch="★", col=5)
contour(kd1, add=TRUE, col=1)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
x3_ar<-arima.sim(n=200,list(ar=0.9))
plot(x3_ar)
Nile
plot(Nile)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
SET_CO2_PATH <- "./../data/CO2.csv"
Ryori <- read.csv(SET_CO2_PATH)
Ryori <- read.csv(SET_CO2_PATH)
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
SET_CO2_PATH <- "./../data/CO2.csv"
Ryori <- read.csv(SET_CO2_PATH)
Ryori <- read.csv(SET_CO2_PATH)
y_all <- ts(data = Ryori$CO2, start = c(1987,1), frequency = 12)
y <- window(y_all, end = c(2018, 4))
y
plot(y)
Nile2 <- ts(Nile, start = 1866)
ts.union(Nile, Nile2)
Nile2 <- 2 * Nile
ts.plot(cbind(Nile, Nile2), lty = c("solid", "dashed"))
ts.plot(cbind(Nile, Nile2),
lty = c("solid", "dashed"),
main = "Fig.3.1 Plotting two ts class cobjects")
ts.plot(cbind(Nile, Nile2),
lty = c("solid", "dashed"),
main = "Fig.3.1 Plotting two ts class objects")
# Start point, finish point, period
tsp(Nile)
time(Nile)
# 'Date' class object
day <- as.Date("2000-01-01")
str(day)
str(day) # confirm data structure
days <- seq(from = as.Date("2000-01-01"),
to = as.Date("2000-01-31"),
by = "day")
days
# extract info of day of the week
weekdays(days)
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
par(mfrow = c(2,2)); par(oma = c(0, 0, 0, 0)); par(mar = c(4, 4, 2, 1))
plot(Nile, main = "(a)")
# 環境リセット----
rm(list = ls()); sapply(X = 1:9, FUN = gc)
memory.size(max = T)
# memory.limit()
memory.limit(size=56000)
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0, 0, 0, 0)); par(mar = c(4, 4, 2, 1))
plot(Nile, main = "(a)")
# config
SET_RESPOSITORY_PATH <- "C:/Users/yuta.sonoda/Desktop/Programming/R"
setwd(SET_RESPOSITORY_PATH)
SET_CO2_PATH <- "./../data/CO2.csv"
Ryori <- read.csv(SET_CO2_PATH)
Ryori <- read.csv(SET_CO2_PATH)
y_all <- ts(data = Ryori$CO2, start = c(1987, 1), frequency = 12)
y <- window(y_all, end = c(2014, 12))
y_CO2 <- y
plot(y_CO2, main = "(b)")
plot(UKgas, main = '(c)')
load("BenchmarkNonLinearModel.RData")
SET_NON_LINEAR_PATH <- "./00_RData/BenchmarkNonLinearModel.RData"
load(SET_NON_LINEAR_PATH)
rm(y)
load(SET_NON_LINEAR_PATH)
plot(y_nonlinear, main = "(d)")
y_nonlinear <- ts(y)
plot(y_nonlinear, main = "(d)")
par(oldpar)
# histogram
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,2,1))
# histogram
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,2,1))
hist(Nile, main = "(a)", xlab = "Annual rate")
summary(Nile)
hist(y_CO2, main = "(b)", xlab = "Concentration of CO2")
summary(y_CO2)
hist(UKgas_log, main = "(c)", xlab = "Log(Consumption of gas)")
hist(log(UKgas), main = "(c)", xlab = "Log(Consumption of gas)")
summary(log(UKgas))
hist(y_nonlinear, main = "(d)", xlab = "Data value")
summary(y_nonlinear)
par(oldpar)
# NA process
NA.point <- which(is.na(y_CO2))
NA.point
# (b) concentration of CO2 in the atmosphere
Ryori <- read.csv(SET_CO2_PATH)
y_all <- ts(data = Ryori$CO2, start = c(1987, 1), frequency = 12)
y <- window(y_all, end = c(2014, 12))
y_CO2 <- y
# NA process
NA.point <- which(is.na(y_CO2))
NA.point
y_CO2[NA.point] <- (y_CO2[NA.point - 1] + y_CO2[NA.point + 1]) / 2
# autocorrelation
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
acf(Nile, main = "(a)")
acf(y_CO2, main = "(b)")
acf(log(UKgas), main = "(c)")
acf(y_nonlinear, main = "(d)")
par(oldpar)
c(10,c(8,4),2)
# Frequency Domain Transformation
plot.spectrum <- function(dat, lab = "", main = "",
y_max = 1, tick = c(8,4), unit = 1){
dat_FFT <- abs(fft(as.vector(dat)))
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
plot(dat_FFT/max(dat_FFT), type = "1", main = main,
ylab = "Standarized Frequency Spectrum", ylim = c(0, y_max),
xlab = sprintf("Frequency[1/%s]", lab), xlim = c(1, data_len/2), xaxt = "n")
axis(side = 1, at = data_len/freq_tick * unit + 1,
labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
plot.spectrum(Nile, lab = "Year", main = "(a)")
plot.spectrum(Nile, lab = "Year", main = "(a)")
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
ylab = "Standarized Frequency Spectrum", ylim = c(0, y_max),
xlab = sprintf("Frequency[1/%s]", lab), xlim = c(1, data_len/2), xaxt = "n")
plot.spectrum <- function(dat, lab = "", main = "",
y_max = 1, tick = c(8,4), unit = 1){
dat_FFT <- abs(fft(as.vector(dat)))
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
ylab = "Standarized Frequency Spectrum", ylim = c(0, y_max),
xlab = sprintf("Frequency[1/%s]", lab), xlim = c(1, data_len/2), xaxt = "n")
axis(side = 1, at = data_len/freq_tick * unit + 1,
labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
plot.spectrum(Nile, lab = "Year", main = "(a)")
plot.spectrum(y_CO2, lab = "Month", main = "(b)", tick = c(12, 6))
plot.spectrum <- function(dat, lab = "", main = "",
y_max = 1, tick = c(8,4), unit = 1){
dat_FFT <- abs(fft(as.vector(dat)))
data_len <- length(dat_FFT)
freq_tick <- c(data_len, tick, 2)
plot(dat_FFT/max(dat_FFT), type = "l", main = main,
ylab = "Standarized Frequency Spectrum", ylim = c(0, y_max),
xlab = sprintf("Frequency[1/%s]", lab), xlim = c(1, data_len/2), xaxt = "n")
axis(side = 1, at = data_len/freq_tick * unit + 1,
labels = sprintf("1/%d", freq_tick), cex.axis = 0.7)
}
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
plot.spectrum(Nile, lab = "Year", main = "(a)")
plot.spectrum(y_CO2, lab = "Month", main = "(b)", tick = c(12, 6))
plot.spectrum(log(UKgas), lab = "Month", main = "(c)", tick = c(12, 6), unit = 3)
plot.spectrum(y_nonlinear, lab = "Point", main = "(d)")
HW_Nile <- HoltWinters(Nile, beta = FALSE, gamma = FALSE)
str(HW_Nile)
HW_CO2 <- HoltWinters(y_CO2)
HW_CO2 <- HoltWinters(y_CO2)
HW_UKgas_log <- HoltWinters(log(UKgas))
HW_nonlinear <- HoltWinters(y_nonlinear, gamma = FALSE)
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
plot(HW_Nile, main = "(a)", col = mygrey, col.predicted = "black", lty.predicted = "dashed")
plot(HW_CO2, main = "(b)", col = mygrey, col.predicted = "black", lty.predicted = "dashed")
plot(HW_UKgas_log, main = "(c)", col = mygrey, col.predicted = "black", lty.predicted = "dashed")
plot(HW_nonlinear, main = "(d)", col = mygrey, col.predicted = "black", lty.predicted = "dashed")
par(oldpar)
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
mygray <- "#80808080"
plot(HW_Nile, main = "(a)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_CO2, main = "(b)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_UKgas_log, main = "(c)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
plot(HW_nonlinear, main = "(d)", col = mygray, col.predicted = "black", lty.predicted = "dashed")
par(oldpar)
HW_out <- HW_Nile
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"],
Residulas = residulas(HW_out))
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"],
Residulas = residuals(HW_out))
plot(HW_decomp, main = "")
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
#
HW_out <- HW_Nile
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"],
Residulas = residuals(HW_out))
plot(HW_decomp, main = "(a)")
#
HW_out <- HW_CO2
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"] + HW_out$fitted[,"trend"],
Season = HW_out$fitted[, "season"],
Residuals = residuals(HW_out))
plot(HW_decomp, main = "(b)")
oldpar <- par(no.readonly = TRUE)
par(mfrow = c(2,2)); par(oma = c(0,0,0,0)); par(mar = c(4,4,3,1))
#
HW_out <- HW_Nile
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"],
Residulas = residuals(HW_out))
plot(HW_decomp, main = "(a)")
#
HW_out <- HW_CO2
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"] + HW_out$fitted[,"trend"],
Season = HW_out$fitted[, "season"],
Residuals = residuals(HW_out))
plot(HW_decomp, main = "(b)")
HW_out <- HW_UKgas_log
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"] + HW_out$fitted[,"trend"],
Season = HW_out$fitted[, "season"],
Residuals = residuals(HW_out))
plot(HW_decomp, main = "(b)")
#
HW_out <- HW_nonlinear
HW_decomp <- ts.union(y = HW_out$x,
Level = HW_out$fitted[,"level"] + HW_out$fitted[,"trend"],
Residuals = residuals(HW_out))
plot(HW_decomp, main = "(d)")
plot(HW_decomp, main = "(d)")
# Holt-Winters predictions
HW_predict <- predict(HW_CO2, n.ahead = 12)
str(HW_predict)
